// Code generated with github.com/pdk/crudgen DO NOT EDIT.

package {{ .PackageName }}

import (
	"database/sql"
	"time"

	"github.com/pdk/crudgen/crudlib"
)

const (
    TableName = "{{ .TableName }}"
)

// Insert wraps InsertTx() in a transaction.
func (r {{.Struct.Name}}) Insert(db *sql.DB) (newR {{ .Struct.Name}}, err error) {

    err = crudlib.InTransaction(db, func (tx *sql.Tx) error {
        newR, err = r.InsertTx(tx)
        return err
    })

    return newR, err
}

// InsertTx will insert on {{ .Struct.Name }}, given a transaction. Invokes
// PreInsert and PostInsert hooks. Returns new {{ .Struct.Name }} with ID,
// timestamps, etc updated.
func (r {{.Struct.Name}}) InsertTx(tx *sql.Tx) ({{ .Struct.Name }}, error) {

    err := crudlib.PreInsert(tx, &r, TableName)
    if err != nil {
        return r, err
    }
    err = crudlib.PreModify(tx, &r, TableName)
    if err != nil {
        return r, err
    }
    {{ range .Struct.CreateTimestampFields }}
    r.{{ .FieldName }} = time.Now(){{ end }}{{ range .Struct.UpdateTimestampFields }}
    r.{{ .FieldName }} = time.Now(){{ end }}

    insertStatement := `{{ .Style.Rebind (.Struct.InsertStatement .TableName) }}`
    crudlib.Log("InsertTx: %s", insertStatement)
    {{ if .Struct.HasAutoIncrColumn }}
    var newID int64
    err = tx.QueryRow(insertStatement, {{ .Struct.InsertBindVars }}).Scan(&newID)
    r.{{ .Struct.AutoIncrFieldName }} = newID;
    {{ else }}
    _, err = tx.Exec(insertStatment, {{ .Struct.InsertBindVars }})
    {{ end }}
    if err != nil {
        return r, err
    }

    err = crudlib.PostModify(tx, &r, TableName)
    if err != nil {
        return r, err
    }
    err = crudlib.PostInsert(tx, &r, TableName)

    return r, err
}
{{ if .IncludeUpdate }}
// Wraps UpdateTx() in a transaction.
func (r {{ .Struct.Name }}) Update(db *sql.DB) (newR {{ .Struct.Name }}, err error) {

    err = crudlib.InTransaction(db, func (tx *sql.Tx) error {
        newR, err = r.UpdateTx(tx)
        return err
    })

    return newR, err
}

// UpdateTx will update a row, given a transaction. Will fail and return an
// error if not exactly 1 row is updated. Returns new {{ .Struct.Name }} with
// timestamps, etc updated.
func (r {{ .Struct.Name }}) UpdateTx(tx *sql.Tx) ({{ .Struct.Name }}, error) {

    err := crudlib.PreUpdate(tx, &r, TableName)
    if err != nil {
        return r, err
    }
    err = crudlib.PreModify(tx, &r, TableName)
    if err != nil {
        return r, err
    }
    {{ range .Struct.UpdateTimestampFields }}
    r.{{ .FieldName }} = time.Now(){{ end }}

    updateStatement := `{{ .Style.Rebind (.Struct.UpdateStatement .TableName) }}`

    crudlib.Log("UpdateTx: %s", updateStatement)
    result, err := tx.Exec(updateStatement, {{ .Struct.UpdateBindVars }})

	rows, err := result.RowsAffected()
	if err != nil {
		return r, err
    }

    if rows == 0 {
        return r, crudlib.NoRowsUpdated
    }

    if rows > 1 {
        return r, crudlib.MoreThanOneRowUpdated
    }

    err = crudlib.PostModify(tx, &r, TableName)
    if err != nil {
        return r, err
    }
    err = crudlib.PostUpdate(tx, &r, TableName)

    return r, err
}{{ else }}
//
// Update() and UpdateTx() omitted by -noupdate
//{{ end }}

// Wraps DeleteTx() in a transaction.
func (r *{{ .Struct.Name }}) Delete(db *sql.DB) (rowCount int64, err error) {
    err = crudlib.InTransaction(db, func (tx *sql.Tx) error {
        rowCount, err = r.DeleteTx(tx)
        return err
    })

    return rowCount, err
}

// DeleteTx executes PreDelete, delete, and PostDelete within a transaction.
// Will fail if delete affects more than one row. No error if 0 rows are
// deleted.
func (r *{{ .Struct.Name }}) DeleteTx(tx *sql.Tx) (rowCount int64, err error) {

    deleteStatement := `{{ .Style.Rebind (.Struct.DeleteStatement .TableName) }}`

    err = crudlib.PreDelete(tx, r, TableName)
    if err != nil {
        return 0, err
    }
    err = crudlib.PreModify(tx, &r, TableName)
    if err != nil {
        return 0, err
    }

    crudlib.Log("DeleteTx: %s", deleteStatement)
    result, err := tx.Exec(deleteStatement, {{ .Struct.DeleteBindVars }})

	if err != nil {
		return 0, err
	}

	rows, err := result.RowsAffected()
    if err != nil {
        return rows, err
    }

    if rows > 1 {
        return rows, crudlib.MoreThanOneRowDeleted
    }

    err = crudlib.PostModify(tx, &r, TableName)
    if err != nil {
        return rows, err
    }
    return rows, crudlib.PostDelete(tx, r, TableName)
}

// {{ .Select }} wraps {{ .Select }}Tx in a transaction.
func {{ .Select }}(db *sql.DB, additionalClauses string, bindValues ...interface{}) (results []{{ .Struct.Name }}, err error) {

    err = crudlib.InTransaction(db, func (tx *sql.Tx) error {
        results, err = {{ .Select }}Tx(tx, additionalClauses, bindValues...)
        return err
    })

    return results, err
}


// {{ .Select }}Tx will select records from table {{ .TableName }} and return a slice of
// {{ .Struct.Name }}. The additionalClauses argument should be SQL to be
// appended to the "select ... from {{ .TableName }}" statement, using "?" for bind
// variables.  E.g. "where foo = ?". bindValues must be provided in the correct
// order to match bind placeholders in the additionalClauses.
func {{ .Select }}Tx(tx *sql.Tx, additionalClauses string, bindValues ...interface{}) ([]{{ .Struct.Name }}, error) {

    selectStatement := `{{ .Struct.SelectStatement .TableName }}`

    if len(additionalClauses) > 0 {
        selectStatement += " " + additionalClauses
        selectStatement = crudlib.{{ .Style.ConstName }}.Rebind(selectStatement)
    }

    values := []{{ .Struct.Name }}{}

    crudlib.Log("{{ .Select }}Tx: %s", selectStatement)
    rows, err := tx.Query(selectStatement, bindValues...)
    if err != nil {
        return values, err
    }
    defer rows.Close()

    for rows.Next() {
        i := {{ .Struct.Name }}{}
        err := rows.Scan({{ .Struct.ScanVars "i" }})
        if err != nil {
            return values, err
        }
        values = append(values, i)
    }

    err = rows.Err()
    if err != nil {
        return values, err
    }

    return values, rows.Close()
}

// {{ .Select }}All does a Select with no additional conditions/clauses.
func {{ .Select }}All(db *sql.DB) ([]{{ .Struct.Name }}, error) {
    return {{ .Select }}(db, "")
}

// {{ .Select }}Row will select one record from table {{ .TableName }} and return a
// {{ .Struct.Name }}. The additionalClauses argument should be SQL to be
// appended to the "select ... from {{ .TableName }}" statement, using "?" for bind
// variables.  E.g. "where foo = ?". bindValues must be provided in the correct
// order to match bind placeholders in the additionalClauses.
// Returns sql.ErrNoRows if no rows found.
func {{ .Select }}Row(db *sql.DB, additionalClauses string, bindValues ...interface{}) ({{ .Struct.Name }}, error) {

    selectStatement := `{{ .Struct.SelectStatement .TableName }}`

    if len(additionalClauses) > 0 {
        selectStatement += " " + additionalClauses
        selectStatement = crudlib.{{ .Style.ConstName }}.Rebind(selectStatement)
    }

    i := {{ .Struct.Name }}{}

    crudlib.Log("{{ .Select }}Row: %s", selectStatement)
    err := db.QueryRow(selectStatement, bindValues...).Scan(
        {{ .Struct.ScanVars "i" }})

    return i, err
}
