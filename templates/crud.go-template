// Code generated with github.com/pdk/crudgen DO NOT EDIT.

package {{ .PackageName }}

import (
    "database/sql"
    "github.com/pdk/crudgen/crudlib"
    "time"
)

// Insert will insert one {{ .Struct.Name }} instance as a row in table {{ .TableName }}.
func (r *{{.Struct.Name}}) Insert(db *sql.DB) error {
    {{ range .Struct.CreateTimestampFields }}
    r.{{ .FieldName }} = time.Now(){{ end }}{{ range .Struct.UpdateTimestampFields }}
    r.{{ .FieldName }} = time.Now()
    {{ end }}
    err := crudlib.PreInsert(r)
    if err != nil {
        return err
    }

    insertStatement := `{{ .Style.Rebind (.Struct.InsertStatement .TableName) }}`
    {{ if .Struct.HasAutoIncrColumn }}
    var newID int64
    err = db.QueryRow(insertStatement, {{ .Struct.InsertBindVars }}).Scan(&newID)
    r.{{ .Struct.AutoIncrFieldName }} = newID;
    {{ else }}
    _, err = db.Exec(insertStatment, {{ .Struct.InsertBindVars }})
    {{ end }}
	return err
}

// Update will update a row in table {{ .TableName }}.
func (r *{{ .Struct.Name }}) Update(db *sql.DB) (rowCount int64, err error) {
    {{ range .Struct.UpdateTimestampFields }}
    r.{{ .FieldName }} = time.Now()
    {{ end }}
    err = crudlib.PreUpdate(r)
    if err != nil {
        return 0, err
    }

    updateStatement := `{{ .Style.Rebind (.Struct.UpdateStatement .TableName) }}`

    result, err := db.Exec(updateStatement, {{ .Struct.UpdateBindVars }})

	if err != nil {
		return 0, err
	}

	return result.RowsAffected()
}

// Delete will delete a row in table {{ .TableName }}.
func (r *{{ .Struct.Name }}) Delete(db *sql.DB) (rowCount int64, err error) {

    deleteStatement := `{{ .Style.Rebind (.Struct.DeleteStatement .TableName) }}`

    result, err := db.Exec(deleteStatement, {{ .Struct.DeleteBindVars }})

    crudlib.PostDelete(r)

	if err != nil {
		return 0, err
	}

	return result.RowsAffected()
}

// {{ .Select }} will select records from table {{ .TableName }} and return a slice of
// {{ .Struct.Name }}. The additionalClauses argument should be SQL to be
// appended to the "select ... from {{ .TableName }}" statement, using "?" for bind
// variables.  E.g. "where foo = ?". bindValues must be provided in the correct
// order to match bind placeholders in the additionalClauses.
func {{ .Select }}(db *sql.DB, additionalClauses string, bindValues ...interface{}) ([]{{ .Struct.Name }}, error) {

    selectStatement := `{{ .Struct.SelectStatement .TableName }}`

    if len(additionalClauses) > 0 {
        selectStatement += " " + additionalClauses
        selectStatement = crudlib.{{ .Style.ConstName }}.Rebind(selectStatement)
    }

    values := []{{ .Struct.Name }}{}

    rows, err := db.Query(selectStatement, bindValues...)
    if err != nil {
        return values, err
    }
    defer rows.Close()

    for rows.Next() {
        i := {{ .Struct.Name }}{}
        err := rows.Scan({{ .Struct.ScanVars "i" }})
        if err != nil {
            return values, err
        }
        values = append(values, i)
    }

    err = rows.Err()
    if err != nil {
        return values, err
    }

    return values, rows.Close()
}

// {{ .Select }}All does a Select with no additional conditions/clauses.
func {{ .Select }}All(db *sql.DB) ([]{{ .Struct.Name }}, error) {
    return {{ .Select }}(db, "")
}


// {{ .Select }}Row will select one record from table {{ .TableName }} and return a
// {{ .Struct.Name }}. The additionalClauses argument should be SQL to be
// appended to the "select ... from {{ .TableName }}" statement, using "?" for bind
// variables.  E.g. "where foo = ?". bindValues must be provided in the correct
// order to match bind placeholders in the additionalClauses.
// Returns sql.ErrNoRows if no rows found.
func {{ .Select }}Row(db *sql.DB, additionalClauses string, bindValues ...interface{}) ({{ .Struct.Name }}, error) {

    selectStatement := `{{ .Struct.SelectStatement .TableName }}`

    if len(additionalClauses) > 0 {
        selectStatement += " " + additionalClauses
        selectStatement = crudlib.{{ .Style.ConstName }}.Rebind(selectStatement)
    }

    i := {{ .Struct.Name }}{}

    err := db.QueryRow(selectStatement, bindValues...).Scan(
        {{ .Struct.ScanVars "i" }})

    return i, err
}
